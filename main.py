import asyncio
from aiogram import Dispatcher
from aiogram import types
from aiogram import F
from aiogram import Bot
from aiogram.filters import Command
from aiogram.types import Message
from aiogram.types import CallbackQuery
from config import BOT_TOKEN
from config import UNSPLASH_ACCESS_KEY
from apscheduler.schedulers.asyncio import AsyncIOScheduler
import sqlite3
from aiogram.filters import StateFilter
import kbs
import logging
from fnmatch import *
import re
import requests
import warnings
from aiogram.utils.keyboard import ReplyKeyboardBuilder
from aiogram.types import ReplyKeyboardRemove
from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.context import FSMContext
from aiogram_calendar import SimpleCalendarCallback
from aiogram_calendar import SimpleCalendar
from aiogram_calendar import get_user_locale
from datetime import datetime
from datetime import date


warnings.filterwarnings("ignore",
                        category=ResourceWarning)

con = sqlite3.connect("product_db.db")
cur = con.cursor()

cur.execute('''
CREATE TABLE IF NOT EXISTS Users (
id INTEGER NOT NULL,
product TEXT,
data TEXT)
''')

con.commit()

bot = Bot(BOT_TOKEN)
dp = Dispatcher()

logging.basicConfig(level=logging.INFO, 
                    filename="loggs.log", 
                    filemode="w",
                    format="%(asctime)s %(levelname)s %(message)s")

logger = logging.getLogger(__name__)


scheduler = AsyncIOScheduler(timezone="Europe/Moscow")
scheduler_started = False


@dp.message(Command("help"))
async def help_me(message: Message):
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {message.from_user.id} –Ω—É–∂–Ω–∞ –ø–æ–º–æ—â—å")
    await message.answer('''–ß—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å –≥–ª–∞–≤–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É, –≤—ã–±–µ—Ä–∏—Ç–µ –≤ –º–µ–Ω—é –∫–æ–º–∞–Ω–¥—É: 
‚≠ïÔ∏è –û—Ç–∫—Ä—ã—Ç—å –º–µ–Ω—é –≤—ã–±–æ—Ä–∞       /open_choice

–ß—Ç–æ–±—ã —Å–∫—Ä—ã—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É, –≤—ã–±–µ—Ä–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É:
‚≠ïÔ∏è –ó–∞–∫—Ä—ã—Ç—å –º–µ–Ω—é –≤—ã–±–æ—Ä–∞       /close_choice

–ß—Ç–æ–±—ã —É–¥–∞–ª–∏—Ç—å —Å–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å –∏ –¥–∞–Ω–Ω—ã–µ –Ω–∞–≤—Å–µ–≥–¥–∞, –≤—ã –º–æ–¥–µ—Ç–µ –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –¥–≤—É–º—è —Å–ø–æ—Å–æ–±–∞–º–∏:
‚û°Ô∏è–∫–æ–º–∞–Ω–¥–∞ –£–¥–∞–ª–∏—Ç—å —Å–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å –≤ –º–µ–Ω—é –≤—ã–±–æ—Ä–∞        /delete_profile

‚û°Ô∏è–ù–∞–∂–∞—Ç—å –∫–Ω–æ–ø–∫—É "—É–¥–∞–ª–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å". –ë—É–¥—å—Ç–µ –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω—ã, –í–∞—à–∏ ‚ÄºÔ∏è–î–∞–Ω–Ω—ã–µ –Ω–µ —Å–æ—Ö—Ä–∞–Ω—è—Ç—Å—è‚ÄºÔ∏è

ü¶û–ï—Å–ª–∏ –≤–¥—Ä—É–≥ —É –í–∞—Å –ù–ï –†–ê–ë–û–¢–ê–Æ–¢ –£–í–ï–î–û–ú–õ–ï–ù–ò–Ø –ø–æ –∫–∞–∫–æ–π-—Ç–æ –ø—Ä–∏—á–∏–Ω–µ, –≤–æ–∑–º–æ–∂–Ω–æ, –±–æ—Ç –±—ã–ª –ø–µ—Ä–µ–∂–∞–ø—É—â–µ–Ω –∏ —Ç—Ä–µ–±—É–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è. –ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–º–∞–Ω–¥—É /start –µ—â—ë —Ä–∞–∑. –í—Å–µ –¥–∞–Ω–Ω—ã–µ –æ—Å—Ç–∞–Ω—É—Ç—Å—è –Ω–µ–∏–∑–º–µ–Ω–Ω—ã–º–∏, —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∑–∞—Ä–∞–±–æ—Ç–∞—é—Çüê•''',
                         reply_markup=kbs.start_key)


async def send_message(bot: Bot, user_id: int, chat_id: int):
    logger.info(f"–ù–∞—á–∞–ª–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è send_message –¥–ª—è user_id={user_id}, chat_id={chat_id}")
    try:
        chek = cur.execute("SELECT product, data FROM Users WHERE id = ?",
                           (user_id,)).fetchall()
        logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ {len(chek)} –∑–∞–ø–∏—Å–µ–π –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –¥–ª—è user_id={user_id}")

        now_data = datetime.now().date()
        tre_days = []
        week_days = []
        drop_days = []

        for i in chek:
            logger.info(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø–∏—Å–∏: product={i[0]}, data={i[1]}")
            try:
                obj_data = str(i[1]).split("-")
                first = date(int(obj_data[0]), int(obj_data[1]), int(obj_data[2]))
                how_days = (first - now_data).days

                if how_days == 3:
                    tre_days.append([i[0], i[1]])
                if how_days == 7:
                    week_days.append([i[0], i[1]])
                if how_days < 0:
                    drop_days.append([i[0], i[1]])
            except (ValueError, IndexError) as e:
                logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞—Ç—ã –¥–ª—è –∑–∞–ø–∏—Å–∏ {i}: {e}")
                continue

        mess = ''
        if tre_days:
            mess += f"–û—Å—Ç–∞–ª–æ—Å—å —Ç—Ä–∏ –¥–Ω—è –¥–æ –æ–∫–æ–Ω—á–∞–Ω–∏—è —Å—Ä–æ–∫–∞ –≥–æ–¥–Ω–æ—Å—Ç–∏: \n {pping(tre_days)}\n\n"

        if week_days:
            mess += f'–û—Å—Ç–∞–ª–∞—Å—å –Ω–µ–¥–µ–ª—è –¥–æ –∫–æ–Ω—Ü–∞ —Å—Ä–æ–∫–∞ –≥–æ–¥–Ω–æ—Å—Ç–∏: \n {pping(week_days)}\n\n'

        if drop_days:
            mess += f"–£ –í–∞—Å –∏–º–µ—é—Ç—Å—è –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã: \n {pping(drop_days)}\n"

        if not mess:
            mess += f"–£ –í–∞—Å –Ω–µ—Ç –ø—Ä–æ–¥—É–∫—Ç–æ–≤, —É –∫–æ—Ç–æ—Ä—ã—Ö —Å–∫–æ—Ä–æ –∑–∞–∫–æ–Ω—á–∏—Ç—Å—è —Å—Ä–æ–∫ –≥–æ–¥–Ω–æ—Å—Ç–∏ –∏–ª–∏ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω—ã"

        logger.info(f"–§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {mess}")
        try:
            await bot.send_message(chat_id=chat_id,
                                   text=mess.strip())

            logger.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ chat_id={chat_id}")

        except Exception as send_error:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ chat_id={chat_id}: {send_error}")

    except Exception as e:
        logger.error(f"–û–±—â–∞—è –æ—à–∏–±–∫–∞ –≤ send_message –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")

        try:
            await bot.send_message(chat_id=chat_id, text="–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.")

        except Exception as send_error:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ –≤ chat_id={chat_id}: {send_error}")


@dp.message(Command("open_choice"))
async def open_menu(message: Message):
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –æ—Ç–∫—Ä—ã–ª –º–µ–Ω—é –≤—ã–±–æ—Ä–∞.")
    await message.answer('''–ú–µ–Ω—é –≤—ã–±–æ—Ä–∞ –æ—Ç–∫—Ä—ã–ª–æ—Å—å üå∫

–ß—Ç–æ–±—ã –∑–∞–∫—Ä—ã—Ç—å –º–µ–Ω—é –≤—ã–±–æ—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –≤ –º–µ–Ω—é –∫–æ–º–∞–Ω–¥
‚û°Ô∏è–ó–∞–∫—Ä—ã—Ç—å –º–µ–Ω—é –≤—ã–±–æ—Ä–∞       /close_choice''',
                         reply_markup=kbs.start_key)


@dp.message(Command("close_choice"))
async def close_menu(message: Message):
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –∑–∞–∫—Ä—ã–ª –º–µ–Ω—é –≤—ã–±–æ—Ä–∞.")
    await message.answer('''–ú–µ–Ω—é –≤—ã–±–æ—Ä–∞ –∑–∞–∫—Ä—ã–ª–æ—Å—å üå∑

–ß—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å –º–µ–Ω—é –≤—ã–±–æ—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –≤ –º–µ–Ω—é –∫–æ–º–∞–Ω–¥
‚û°Ô∏è–û—Ç–∫—Ä—ã—Ç—å –º–µ–Ω—é –≤—ã–±–æ—Ä–∞       /open_choice''',
                         reply_markup=ReplyKeyboardRemove())


@dp.message(Command("start"))
async def start_menu(message: Message, bot: Bot = bot):
    global scheduler_started
    try:
        chek = cur.execute("SELECT * FROM Users WHERE id = ?",
                           (message.from_user.id,)).fetchall()

        job_id = f"notify_{message.from_user.id}"
        if not scheduler.get_job(job_id):
            scheduler.add_job(
                send_message,
                trigger="cron",
                hour=17,
                minute=45,
                start_date=datetime.now(),
                kwargs={
                    "bot": bot,
                    "user_id": message.from_user.id,
                    "chat_id": message.chat.id,
                },
                id=job_id,
                replace_existing=True
            )
            logger.info(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id} –∑–∞–ø—É—â–µ–Ω—ã")

        if not scheduler_started:
            scheduler.start()
            scheduler_started = True
            logger.info("–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–ø—É—â–µ–Ω")

        if len(chek) == 0:
            await message.answer(f'''–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç-—Ö–æ–ª–æ–¥–∏–ª—å–Ω–∏–∫üòä
            
–° —ç—Ç–∏–º —Ç–µ–ª–µ–≥—Ä–∞–º–º-–±–æ—Ç–æ–º –í—ã –º–æ–∂–µ—Ç–µ –Ω–µ –±–µ—Å–ø–æ–∫–æ–∏—Ç—å—Å—è –æ —Å—Ä–æ–∫–µ –≥–æ–¥–Ω–æ—Å—Ç–∏ —Å–≤–æ–∏—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤. –û–Ω –≤—Å—ë —Å–¥–µ–ª–∞–µ—Ç –∑–∞ –≤–∞—ÅÔ∏è ‚òÄÔ∏è

–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –æ–∫–æ–Ω—á–∞–Ω–∏–∏ —Å—Ä–æ–∫–æ–≤ –≥–æ–¥–Ω–æ—Å—Ç–∏ –±—É–¥—É—Ç –ø—Ä–∏—Ö–æ–¥–∏—Ç—å –∑–∞ –Ω–µ–¥–µ–ª—é, –∑–∞ —Ç—Ä–∏ –¥–Ω—è –∏ –≤ –¥–µ–Ω—å –æ–∫–æ–Ω—á–∞–Ω–∏—è —Å—Ä–æ–∫–∞ –≥–æ–¥–Ω–æ—Å—Ç–∏.

–î–ª—è –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ–π —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞ –í–∞–º –ø–æ—Ç—Ä–µ–±—É–µ—Ç—Å—è –≤—Å–µ–≥–æ 5 –º–∏–Ω—É—Ç –≤—Ä–µ–º–µ–Ω–∏. –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –≤—ã–±—Ä–∞—Ç—å –Ω—É–∂–Ω—É—é –∫–æ–º–∞–Ω–¥—É –∏–∑ –º–µ–≥—é –∫–Ω–æ–ø–æ–∫ –∏ —Å–ª–µ–¥–æ–≤–∞—Ç—å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏.
–î–ª—è –Ω–∞—á–∞–ª–∞ —Å–æ–≤–µ—Ç—É—é –≤—ã–±—Ä–∞—Ç—å "–î–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–¥—É–∫—Ç", —á—Ç–æ–±—ã —Ä–∞–∑–æ–±—Ä–∞—Ç—å—Å—è –≤ —Ä–∞–±–æ—Ç–µ –±–æ—Ç–∞.

–ü—Ä–∏ –≤–≤–æ–¥–µ –ø—Ä–æ–¥—É–∫—Ç–æ–≤, –Ω–∞ –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ –∏–∑ –Ω–∏—Ö –±—É–¥–µ—Ç –≤—ã—Å–≤–µ—á–∏–≤–∞—Ç—å—Å—è –∫–∞—Ä—Ç–∏–Ω–∫–∞. –ï—Å–ª–∏ –≤—ã –±—É–¥–µ—Ç–µ –≤–≤–æ–¥–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º, –∫–∞—Ä—Ç–∏–Ω–∫–∏ –±—É–¥—É—Ç —Ç–æ—á–Ω–µ–µ.üòä

–í –ª—é–±–æ–π –º–æ–º–µ–Ω—Ç –í—ã –º–æ–∂–µ—Ç–µ —É–¥–∞–ª–∏—Ç—å —Å–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å, –Ω–æ –±—É–¥—å—Ç–µ –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω—ã, ‚ùóÔ∏è–í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ –Ω–µ —Å–æ—Ö—Ä–∞–Ω—è—Ç—Å—è‚ùóÔ∏è, –≤—Å—ë –ø—Ä–∏–¥—ë—Ç—Å—è –∑–∞–ø–æ–ª–Ω—è—Ç—å —Å–Ω–æ–≤–∞ üò´

–¢–∞–∫–∂–µ —É –í–∞—Å –µ—Å—Ç—å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–≤–æ–∏ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã –∏ —É–¥–∞–ª–∏—Ç—å –∏—Ö.

‚ÄºÔ∏è–í–ù–ò–ú–ê–ù–ò–ï‚Äº

–ï—Å–ª–∏ –≤–æ–∑–Ω–∏–∫–ª–∏ –∫–∞–∫–∏–µ-—Ç–æ –≤–æ–ø—Ä–æ—Å—ã, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–º–∞–Ω–¥—É /help

–£–¥–∞—á–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—èüôÇ ''',
                                 reply_markup=kbs.start_key)
        else:
            await message.answer(
                '''–í—ã –ø–æ–≤—Ç–æ—Ä–Ω–æ –Ω–∞–∂–∞–ª–∏ –Ω–∞ –∫–æ–º–∞–Ω–¥—É /start, –≤–∞—à–∞ —Ä–∞–±–æ—Ç–∞ –≤ –±–æ—Ç–µ –Ω–µ –ø—Ä–µ—Ä–≤–∞–Ω–∞. 
    –î–ª—è —É–¥–∞–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–Ω–æ–ø–∫–æ–π "—É–¥–∞–ª–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å"''',
                reply_markup=kbs.start_key)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ start_menu –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.")


@dp.message(Command("delete_profile"))
async def delete_datab(message: Message):
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ö–æ—á–µ—Ç {message.from_user.id} —É–¥–∞–ª–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å.")
    await message.answer(f"–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –≤—Å–µ —Å–≤–æ–∏ –¥–∞–Ω–Ω—ã–µ –Ω–∞–≤—Å–µ–≥–¥–∞?üò£",
                         reply_markup=kbs.yes_or_no())


@dp.message(F.text.lower() == "—É–¥–∞–ª–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å")
async def delete_datab(message: Message):
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} —Ö–æ—á–µ—Ç —É–¥–∞–ª–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å.")
    await message.answer(f"–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –≤—Å–µ —Å–≤–æ–∏ –¥–∞–Ω–Ω—ã–µ –Ω–∞–≤—Å–µ–≥–¥–∞?üò£",
                         reply_markup=kbs.yes_or_no())


@dp.callback_query(kbs.Pang.filter(F.action.in_(["del", "no_del"])))
async def yes_no_del(call: CallbackQuery, callback_data: kbs.Pang):
    chek = cur.execute("SELECT * FROM Users WHERE id = ?",
                       (call.from_user.id,)).fetchall()
    now_id = call.from_user.id

    if callback_data.action == "no_del":
        await call.message.answer("–í—ã –Ω–µ —É–¥–∞–ª–∏–ª–∏ –¥–∞–Ω–Ω—ã–µ, –ø—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ —Ä–∞–±–æ—Ç—É",
                                  reply_markup=kbs.start_key)

    elif callback_data.action == "del":
        if len(chek) == 0:
            await call.message.answer("–£ –≤–∞—Å –Ω–µ—Ç –∑–∞–ø–∏—Å–∞–Ω–Ω—ã—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤, –ø–æ—ç—Ç–æ–º—É –º–æ–∂–µ—Ç–µ –Ω–∞—á–∏–Ω–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å–Ω–∞—á–∞–ª–∞",
                                      reply_markup=kbs.edit_th)
        else:
            cur.execute('DELETE FROM Users WHERE id = ?',
                        (now_id,))
            con.commit()

            await call.message.answer(f'''–í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ —É–¥–∞–ª–µ–Ω—ã.

–ß—Ç–æ–±—ã –≤–æ–∑–æ–±–Ω–æ–≤–∏—Ç—å —Ä–∞–±–æ—Ç—É –±–æ—Ç–∞, –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–æ–º–∞–Ω–¥—É

‚û°Ô∏è/start''',
                                      reply_markup=kbs.start_new_profile)
    await call.answer()


def pping(spis):
    result = []
    for k, (prod, date) in enumerate(spis, start=1):
        result.append(f"{k}. {prod} {date}")
    return "\n".join(result)


@dp.message(F.text.lower() == "—Å–ø–∏—Å–æ–∫ –º–æ–∏—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤")
async def chek_product(message: Message):
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} —Ö–æ—á–µ—Ç —É–∑–Ω–∞—Ç—å —Å–ø–∏—Å–æ–∫ —Å–≤–æ–∏—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤.")
    now_product = cur.execute("SELECT product, data FROM Users WHERE id = ?",
                              (message.from_user.id,)).fetchall()

    if len(now_product) == 0:
        await message.answer("–í—ã –µ—â–µ –Ω–µ –∑–∞–ø–∏—Å–∞–ª–∏ –≤ —Ç–∞–±–ª–∏—Ü—É –ø—Ä–æ–¥—É–∫—Ç—ã, –Ω–∞—á–Ω–∏—Ç–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ —Å–µ–π—á–∞—Å!‚¨áÔ∏è",
                             reply_markup=kbs.edit_th)
    else:
        await message.answer(f'''–í–∞—à–∏ –ø—Ä–æ–¥—É–∫—Ç—ã:
{pping(now_product)}''',
                             reply_markup=kbs.start_key)


@dp.message(F.text.lower() == "–ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω–æ–µ")
async def see_old(message: Message):
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} —Ö–æ—á–µ—Ç —É–∑–Ω–∞—Ç—å —Å–ø–∏—Å–æ–∫ —Å–≤–æ–∏—Ö –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤.")
    old_data = cur.execute("SELECT * FROM Users WHERE id = ?",
                           (message.from_user.id,)).fetchall()
    now_data = datetime.now().date()
    convert_result = []

    for i in old_data:
        try:
            if not re.match(r"\d{4}-\d{2}-\d{2}", str(i[2])):
                logging.warning(f"–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã: {i[2]}")
                continue

            obj_data = str(i[2]).split("-")
            first = date(int(obj_data[0]), int(obj_data[1]), int(obj_data[2]))

            delta = (first - now_data).days
            if delta <= 0:
                convert_result.append([i[1], i[2]])
        except (ValueError, IndexError) as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞—Ç—ã: {e}")
            continue

    if len(convert_result) == 0:
        all_product = len(old_data)
        await message.answer(f'''–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤üå±
        
–í—Å–µ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–æ–≤: {all_product}''',
                             reply_markup=kbs.start_key)

    else:
        await message.answer(f'''–í–∞—à–∏ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã:
{pping(convert_result)}''',
                             reply_markup=kbs.delete_func())


@dp.callback_query(kbs.Old.filter(F.action.in_(["out_del", "no_out"])))
async def old_thing(call: CallbackQuery, callback_data: kbs.Old):
    if callback_data.action == "out_del":
        old_data = cur.execute("SELECT * FROM Users WHERE id = ?",
                               (call.from_user.id,)).fetchall()
        now_data = datetime.now().date()
        convert_result = []

        if len(old_data) != 0:
            for i in old_data:
                obj_data = str(i[2]).split("-")
                first = date(int(obj_data[0]), int(obj_data[1]), int(obj_data[2]))
                how_days = (first - now_data).days
                if how_days<= 0:
                    convert_result.append([i[1], i[2]])

        for i in convert_result:
            cur.execute("DELETE FROM Users WHERE (product, data) = (?, ?)",
                        (i[0], i[1]))
            con.commit()
        await call.message.answer("–í—Å–µ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω–æ–µ —É–¥–∞–ª–µ–Ω–æ‚úÖ",
                                  reply_markup=kbs.start_key)

    elif callback_data.action == "no_out":
        await call.message.answer("–í—ã –Ω–µ —É–¥–∞–ª–∏–ª–∏ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω–æ–µ, –ø—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ —Ä–∞–±–æ—Ç—É",
                                  reply_markup=kbs.start_key)

    await call.answer()


@dp.message(F.text.lower() == "–≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
async def beck_to_men(message: Message):
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} —Ö–æ—á–µ—Ç –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.")
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ‚¨áÔ∏è",
                         reply_markup=kbs.start_key)


class Dele(StatesGroup):
    del_object = State()


@dp.message(F.text.lower() == "—É–¥–∞–ª–∏—Ç—å –ø—Ä–æ–¥—É–∫—Ç")
async def del_norm(message: Message, state: FSMContext):
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} —Ö–æ—á–µ—Ç —É–¥–∞–ª–∏—Ç—å –∫–∞–∫–æ–π-—Ç–æ –ø—Ä–æ–¥—É–∫—Ç.")

    now_product = cur.execute("SELECT product, data FROM Users WHERE id = ?",
                              (message.from_user.id,)).fetchall()

    if len(now_product) > 0:
        await state.set_state(Dele.del_object)
        await message.answer(f"–í–∞—à–∏ –ø—Ä–æ–¥—É–∫—Ç—ã: \n{pping(now_product)}")

        builder = ReplyKeyboardBuilder()
        for i in range(len(now_product)):
            builder.add(types.KeyboardButton(text=str(i + 1)))
        builder.adjust(3)

        builder.row(types.KeyboardButton(text="–û—Ç–º–µ–Ω–∞"))

        await message.answer('''–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–º–µ—Ä –ø—Ä–æ–¥—É–∫—Ç–∞, —á—Ç–æ–±—ã —É–¥–∞–ª–∏—Ç—å –µ–≥–æüì≤''',
                             reply_markup=builder.as_markup(resize_keyboard=True))
    else:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –∑–∞–ø–∏—Å–∞–Ω–Ω—ã—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤, –Ω–∞—á–Ω–∏—Ç–µ –∑–∞–ø–æ–ª–Ω—è—Ç—å —Ç–∞–±–ª–∏—Ü—É‚¨áÔ∏è",
                             reply_markup=kbs.edit_th)


@dp.callback_query(kbs.Pang.filter(F.action.in_(["otm"])))
async def otm_or_not(call: CallbackQuery, callback_data: kbs.Pang, state: FSMContext):
    if callback_data.action == "otm":
        await call.message.answer("–í—ã –æ—Ç–º–µ–Ω–∏–ª–∏ –¥–∞–Ω–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ, –ø—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ —Ä–∞–±–æ—Ç—É.",
                                  reply_markup=kbs.start_key)
        await state.clear()
    await call.answer()


@dp.message(Dele.del_object)
async def start_delete(message: Message, state: FSMContext):
    now_product = cur.execute("SELECT id, product, data FROM Users WHERE id = ?",
                              (message.from_user.id,)).fetchall()

    if message.text.lower() == "–æ—Ç–º–µ–Ω–∞":
        await message.answer("–£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.",
                             reply_markup=kbs.start_key)
        await state.clear()
        return

    if not message.text.isdigit():
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –ø—Ä–æ–¥—É–∫—Ç–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 1, 2, 3).",
                             reply_markup=kbs.func_otmena())
        return

    product_index = int(message.text) - 1
    if product_index < 0 or product_index >= len(now_product):
        await message.answer(f"–ù–æ–º–µ—Ä –ø—Ä–æ–¥—É–∫—Ç–∞ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 1 –¥–æ {len(now_product)}. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        return

    now_work = now_product[product_index]
    cur.execute("DELETE FROM Users WHERE (id, product, data) = (?, ?, ?)",
                (now_work[0], now_work[1], now_work[2]))
    con.commit()

    await message.answer('''–ü—Ä–æ–¥—É–∫—Ç —É–¥–∞–ª—ë–Ω‚úÖ

    –ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —á—Ç–æ-—Ç–æ –µ—â—ë, —Å–Ω–æ–≤–∞ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É
    ‚û° —É–¥–∞–ª–∏—Ç—å –ø—Ä–æ–¥—É–∫—Ç''',
                         reply_markup=kbs.start_key)

    await state.clear()


class Form(StatesGroup):
    obje = State()
    date = State()


@dp.message(F.text.lower() == "–¥–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–¥—É–∫—Ç")
async def fill_db(message: Message, state: FSMContext):
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} —Ö–æ—á–µ—Ç –¥–æ–±–∞–≤–∏—Ç—å –∫–∞–∫–æ–π-—Ç–æ –ø—Ä–æ–¥—É–∫—Ç.")

    await state.set_state(Form.obje)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Ç–æ–ª—å–∫–æ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞‚¨áÔ∏è",
                         reply_markup=kbs.func_otmena())


@dp.message(Form.obje)
async def name_prod(message: Message, state: FSMContext):
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} —Ö–æ—á–µ—Ç —É–∫–∞–∑–∞—Ç—å —Å—Ä–æ–∫ –≥–æ–¥–Ω–æ—Å—Ç–∏ –Ω–æ–≤–æ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–∞.")

    calendar = SimpleCalendar(
        locale=await get_user_locale(message.from_user),
        show_alerts=True
    )

    await state.update_data(obje=message.text)
    await state.set_state(Form.date)

    await message.answer(
        f'''üìÖ –£–∫–∞–∂–∏—Ç–µ —Å—Ä–æ–∫ –≥–æ–¥–Ω–æ—Å—Ç–∏:

–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –∏–∑ –∫–∞–ª–µ–Ω–¥–∞—Ä—è –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –≤—Ä—É—á–Ω—É—é –≤ —Ñ–æ—Ä–º–∞—Ç–µ {date.today()}''',
        reply_markup=await calendar.start_calendar()
    )


@dp.callback_query(SimpleCalendarCallback.filter())
async def process_calendar_selection(callback_query: CallbackQuery, state: FSMContext,
                                     callback_data: SimpleCalendarCallback):
    calendar = SimpleCalendar(
        locale=await get_user_locale(callback_query.from_user),
        show_alerts=True
    )

    selected, date = await calendar.process_selection(callback_query, callback_data)
    if selected:
        formatted_date = date.strftime("%Y-%m-%d")
        await state.update_data(date=formatted_date)

        all_data = await state.get_data()
        user_id = callback_query.from_user.id

        product_name = all_data["obje"]
        expiration_date = all_data["date"]

        try:
            cur.execute("INSERT INTO Users (id, product, data) VALUES (?, ?, ?)",
                        (user_id, product_name, expiration_date))
            con.commit()

            url = "https://api.unsplash.com/search/photos"
            headers = {"Authorization": f"Client-ID {UNSPLASH_ACCESS_KEY}"}
            params = {"query": product_name, "per_page": 1}

            response = requests.get(url, headers=headers, params=params)
            response.raise_for_status()
            data = response.json()

            if data["results"]:
                image_url = data["results"][0]["urls"]["regular"]
                await callback_query.message.answer_photo(
                    photo=image_url,
                    caption=f"–ü—Ä–æ–¥—É–∫—Ç '{product_name}' –¥–æ–±–∞–≤–ª–µ–Ω —Å —Å—Ä–æ–∫–æ–º –≥–æ–¥–Ω–æ—Å—Ç–∏ {expiration_date}!"
                )
            else:
                await callback_query.message.answer(
                    '''–ü—Ä–æ–¥—É–∫—Ç '{product_name}' –¥–æ–±–∞–≤–ª–µ–Ω —Å —Å—Ä–æ–∫–æ–º –≥–æ–¥–Ω–æ—Å—Ç–∏ {expiration_date}.

–ö–∞—Ä—Ç–∏–Ω–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ ü•∫

–ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ —É–≤–∏–¥–µ—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ, –≤ —Å–ª–µ–¥—É—é—â–∏–π —Ä–∞–∑ –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º —è–∑—ã–∫–µ'''
                )

            await callback_query.message.answer('''–°—É–ø–µ—Ä, –∑–∞–ø–∏—Å—å —Å–æ–∑–¥–∞–Ω–∞üëç

–ß—Ç–æ –¥–∞–ª—å—à–µ?ü§î''',
                                                reply_markup=kbs.start_key)
            await state.clear()

        except requests.RequestException as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")
            await callback_query.message.answer(
                f'''–ü—Ä–æ–¥—É–∫—Ç '{product_name}' –¥–æ–±–∞–≤–ª–µ–Ω —Å —Å—Ä–æ–∫–æ–º –≥–æ–¥–Ω–æ—Å—Ç–∏ {expiration_date}
                 
–ö–∞—Ä—Ç–∏–Ω–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ ü•∫

–ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ —É–≤–∏–¥–µ—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ, –≤ —Å–ª–µ–¥—É—é—â–∏–π —Ä–∞–∑ –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º —è–∑—ã–∫–µ'''
            )

            await callback_query.message.answer(
                '''–°—É–ø–µ—Ä, –∑–∞–ø–∏—Å—å —Å–æ–∑–¥–∞–Ω–∞üëç
–ß—Ç–æ –¥–∞–ª—å—à–µ?ü§î''',
                reply_markup=kbs.start_key)
            await state.clear()

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—Å—Ç–∞–≤–∫–µ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö: {e}")
            await callback_query.message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.")
            await state.clear()

    await callback_query.answer()


chis = "0123456789-"


def check_data(n):
    if fnmatch(str(n), "????-??-??"):
        for i in n:
            if i not in chis:
                return 0
        now = n.split("-")
        year = int(now[0])
        month = int(now[1])
        day = int(now[2])
        if month == 2:
            if (year % 4 == 0 and year % 100 != 0) or (year % 400 == 0):
                max_day = 29
            else:
                max_day = 28
            if day > max_day:
                return 0
        if month > 12 or month < 1:
            return 0
        if day > 31 or day < 1:
            return 0
    try:
        date(year, month, day)
        return 1
    except ValueError:
        return 0
    return 0


@dp.message(Form.date)
async def name_da(message: Message, state: FSMContext):
    if check_data(message.text):
        await state.update_data(date=message.text)
        all_data = await state.get_data()
        now = message.from_user.id

        if "obje" not in all_data or "date" not in all_data:
            await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.")
            return

        product_name = all_data["obje"]
        expiration_date = all_data["date"]

        try:
            cur.execute("INSERT INTO Users (id, product, data) VALUES (?, ?, ?)",
                        (now, product_name, expiration_date))
            con.commit()

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—Å—Ç–∞–≤–∫–µ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö: {e}")
            await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.")
            return

        await state.clear()
        await message.answer(
            ''''–°—É–ø–µ—Ä, –∑–∞–ø–∏—Å—å —Å–æ–∑–¥–∞–Ω–∞üëç

–ß—Ç–æ –¥–∞–ª—å—à–µ?ü§î''',
            reply_markup=kbs.start_key)

    else:
        await message.reply(
            f'''–í—ã –≤–≤–µ–ª–∏ –¥–∞—Ç—É –≤ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ.üò¢

‚ÄºÔ∏è–ü–æ–ø—ã—Ç–∞–π—Ç–µ—Å—å –µ—â–µ —Ä–∞–∑ –≤ —Ñ–æ—Ä–º–∞—Ç–µ {datetime.date.today()}
(–≥–æ–¥, –º–µ—Å—è—Ü, —á–∏—Å–ª–æ)‚¨áÔ∏è''',
            reply_markup=kbs.back_to_menu)


@dp.message(StateFilter(None))
async def handle_unexpected(message: Message):
    if message.text:
        await message.answer(
            '''–Ø –Ω–µ –ø–æ–Ω–∏–º–∞—é —ç—Ç—É –∫–æ–º–∞–Ω–¥—É üò¢
            
–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ     ‚û°Ô∏è/help –¥–ª—è —Å–ø–∏—Å–∫–∞ —Å–ø—Ä–∞–≤–æ–∫
–∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏—è –∏–∑ –º–µ–Ω—é    ‚û°Ô∏è/open_choice''',
            reply_markup=kbs.start_key
        )
    else:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã –∏–∑ –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ –∏–ª–∏ –∏–∑ –º–µ–Ω—é –∫–Ω–æ–ø–æ–∫",
                             reply_markup=kbs.start_key)


async def main():
    await bot.delete_webhook(drop_pending_updates=True)
    await dp.start_polling(bot)


if __name__ == "__main__":
    asyncio.run(main())
